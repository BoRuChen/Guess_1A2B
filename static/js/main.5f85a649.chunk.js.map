{"version":3,"sources":["store/actionTypes/index.ts","store/actions/index.ts","App.tsx","serviceWorker.ts","store/reducers/guessReducer.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["ActionTypes","addNum","Num","dispatch","type","ADD_NUM","payload","clearNum","CLEAR_NUM","getAns","Anses","k","Math","round","random","length","find","x","toString","push","Ans","getGuseeAns","guessNums","ansSteings","split","A","B","map","ansSteing","index","guessNum","index1","App","useDispatch","bindActionCreators","action","guess","useSelector","state","validate","Yup","Guess","matches","min","max","required","useState","win","setWin","btnOnClick","className","initialValues","validationSchema","onSubmit","values","actions","numGuess","resetForm","window","alert","formik","name","value","errors","disabled","onClick","num","Boolean","location","hostname","match","initState","Reducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f85a649.chunk.js","sourcesContent":["export enum ActionTypes {\r\n    ADD_NUM='addNum',\r\n    CLEAR_NUM='clearNum'\r\n}","import { ActionTypes } from \"../actionTypes\"\r\nimport { Dispatch } from \"redux\"\r\n\r\nexport const addNum = (Num:string) => {\r\n    return(dispatch : Dispatch) => {\r\n        dispatch({\r\n            type:ActionTypes.ADD_NUM,\r\n            payload: Num\r\n        })\r\n    }\r\n}\r\n\r\nexport const clearNum = () => {\r\n    return(dispatch : Dispatch) => {\r\n        dispatch({\r\n            type:ActionTypes.CLEAR_NUM,\r\n        })\r\n    }\r\n}\r\n","import React, { useState } from 'react';\nimport { ErrorMessage, Form, Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Reducer from './store/reducers';\nimport * as action from './store/actions';\nimport { bindActionCreators } from 'redux';\n\nconst getAns = () => {\n  let Anses:string[] = []\n  let k = Math.round(Math.random()*10);\n  while (Anses.length < 4) {\n    if (!Anses.find(x => x===k.toString()))\n    {\n      Anses.push(k.toString())\n    }\n    k = Math.round(Math.random()*10);\n  }\n  return Anses[0] +Anses[1]+Anses[2]+Anses[3]\n}\n\nlet Ans = getAns();\n\ntype State = ReturnType<typeof Reducer>\n\nconst getGuseeAns = (guessNums:string[]) => {\n  let ansSteings = Ans.split(\"\")\n  let A = 0\n  let B = 0\n  ansSteings.map((ansSteing,index)=>{\n    guessNums.map((guessNum,index1)=>{\n      if (ansSteing===guessNum) {\n        if(index === index1){\n          A++\n        }\n        else{\n          B++\n        }\n      }\n    })\n  })\n  return `${A}A${B}B`\n}\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const {addNum,clearNum} = bindActionCreators(action, dispatch);\n  const guess = useSelector((state: State) => state.guess);\n\n  const validate = Yup.object({\n    Guess: Yup.string().matches(/(\\d)/, \"請輸入數字\").matches(/^(?!.*(\\d).*\\1).*$/, \"數字重複\").min(4, \"請輸入4個數字\").max(4, \"請輸入4個數字\").required(\"必填\")\n  })\n\n  const [win, setWin] = useState(false)\n\n  const btnOnClick = () => {\n    clearNum();\n    Ans = getAns();\n    setWin(false);\n  }\n\n  return (\n    <div>\n      <div className=\"bg-blue-400 w-screen sticky top-0 flex z-50 justify-center h-10 items-center \">\n        1A2B猜數字\n      </div>\n      <div className=\"flex flex-col items-center w-3/4 m-auto bg-red-100\">\n        <div className=\"text-yellow-700\">\n          <p>1. 一進到遊戲電腦隨機產生4位不重複數字</p>\n          <p>2. 使用者送出答案，若不符合「不重複4位數字」則跳錯誤訊息</p>\n          <p>3. 送出的答案跟正確答案比較，位置一樣則A，位置不同則B</p>\n          <p>4. 會累積過去猜過的答案與結果</p>\n          <p>5. 如果猜到 4A 則遊戲結束，並可另開新局</p>\n        </div>\n        <Formik\n          initialValues={{\n            Guess: ''\n          }}\n          validationSchema={validate}\n          onSubmit={(values,actions) => {\n            let numGuess = values.Guess.split(\"\")\n            addNum(`${values.Guess}->${getGuseeAns(numGuess)}`)\n            actions.resetForm()\n            if(getGuseeAns(numGuess)===\"4A0B\"){\n              setWin(true);\n              window.alert(\"遊戲獲勝!!\");\n            }\n          }}>\n          {\n            formik => {\n              return (\n                <div className=\"flex flex-col items-center\">\n                  <Form className=\"flex flex-col\">\n                    <p>輸入數字</p>\n                    <Field type=\"text\" name='Guess' value={formik.values.Guess} className={` ${formik.errors.Guess && \"bg-red-600\"}`} disabled={win?true:false} />\n                    <ErrorMessage name=\"Guess\" />\n                    <div className=\"flex justify-between m-auto\">\n                      <button type=\"submit\" className=\"m-2 rounded-lg border-2 w-20 bg-green-50 hover:bg-green-200\" disabled={win?true:false} >提交</button>\n                      <button type=\"reset\" className=\"m-2 rounded-lg border-2 w-20 bg-red-50 hover:bg-red-200\">重製</button>\n                    </div>\n                  </Form>\n                  {\n                    win?<button onClick={btnOnClick} className=\"m-2 rounded-lg border-2 w-20 bg-green-50 hover:bg-green-200\">再來一局</button>:''\n                  }\n                </div>)\n            }\n          }\n        </Formik>\n      </div>\n      <div className=\"flex flex-col items-center\">\n        {\n          guess.map((num) => {\n            return(\n              <p key={num}>{num}</p>\n            )\n          })\n        }\n      </div>\n    </div>\n\n  );\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import { ActionTypes } from \"../actionTypes\"\r\n\r\nconst initState: string[] = [];\r\n\r\nexport const guessReducer = (state = initState, action: any) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_NUM:\r\n            return [...state, action.payload]\r\n        case ActionTypes.CLEAR_NUM:\r\n            return initState\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { guessReducer } from \"./guessReducer\"\r\n\r\nconst Reducer = combineReducers({\r\n    guess : guessReducer\r\n})\r\n\r\nexport default Reducer;","import { createStore , applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport Reducer from \"./reducers\";\r\n\r\nconst store = createStore(Reducer,{},applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}